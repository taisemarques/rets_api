{
	"info": {
		"_postman_id": "414e9452-ab4e-4734-9924-6471c56202cd",
		"name": "Rets_Api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "AUTOMATED TEST",
			"item": [
				{
					"name": "Get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (Age)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.age).to.eql(8);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (horseFacilities)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.horseFacilities).to.eql(\"horseFacilities\");\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (horseFacilitiesIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.horseFacilitiesIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (hotTub)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.hotTub).to.eql('hotTub');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (hotTubIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.hotTubIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (tennisCourt)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tennisCourt).to.eql('tennisCourt');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (tennisCourtIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tennisCourtIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (inclusions)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.inclusions).to.eql('inclusions');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (energyInformation)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.energyInformation).to.eql('energyInformation');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (constructionMaterial)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.constructionMaterial).to.eql('constructionMaterial');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (disabilityFeatures)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.disabilityFeatures).to.eql('disabilityFeatures');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (disabilityFeaturesIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.disabilityFeaturesIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (securityFeatures)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.securityFeatures).to.eql('securityFeatures');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (securityFeaturesIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.securityFeaturesIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (propertyTypeRental)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.propertyTypeRental).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (propertyTypeFarm)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.propertyTypeFarm).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (propertyTypeCondo)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.propertyTypeCondo).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (propertyTypeTownHouse)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.propertyTypeTownHouse).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (firePlaceFuelType)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.firePlaceFuelType).to.eql('fire');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (firePlaceDetails)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.firePlaceDetails).to.eql('details');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (floorsHardwood)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.floorsHardwood).to.eql('wood');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (floorsHardwoodIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.floorsHardwoodIndicator).to.eql('NO');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (displayFlagListing)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.displayFlagListing).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (displayFlagAddress)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.displayFlagAddress).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (lotSizeRange)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.lotSizeRange).to.eql('size');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (lotSizeRangeUnits)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.lotSizeRangeUnits).to.eql('SQ_METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (lotSizeWidthUnits)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.lotSizeWidthUnits).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (diningRoomWidthUnits)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.diningRoomWidthUnits).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (familyRoomWidthUnits)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.familyRoomWidthUnits).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (livingRoomWidthUnits)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.livingRoomWidthUnits).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (basementWidthUnits)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.basementWidthUnits).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (lotSizeLengthUnits)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.lotSizeLengthUnits).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (diningRoomLengthUnits)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.diningRoomLengthUnits).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (livingRoomLengthUnits)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.livingRoomLengthUnits).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (familyRoomLengthUnits)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.familyRoomLengthUnits).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (basementLengthUnits)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.basementLengthUnits).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (parkingTotal)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.parkingTotal).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (parkingTotalOperator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.parkingTotalOperator).to.eql('DEFAULT_ENUM_VALUE');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Value check for (financialData.leaseOption)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.financialData.leaseOption).to.eql('leaseOption');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (financialData.leaseIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.financialData.leaseIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (financialData.tradeOption)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.financialData.tradeOption).to.eql('tradeOption');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (financialData.tradeIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.financialData.tradeIndicator).to.eql(\"YES\");\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (financialData.rentalAmount)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.financialData.rentalAmount).to.eql(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (financialData.rentalAmountType)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.financialData.rentalAmountType).to.eql('INTEGER');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (financialData.rentalAmountCurrencyCode)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.financialData.rentalAmountCurrencyCode).to.eql('rentalAmountCurrencyCode');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (financialData.rentalAmountPeriod)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.financialData.rentalAmountPeriod).to.eql('MONTH');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (financialData.rentalAmountUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.financialData.rentalAmountUnit).to.eql('SQ_METERS');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Value check for (schoolList.primary)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.schoolList[0].primary).to.eql('primarySchool1');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (schoolList.jrHigh)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.schoolList[0].jrHigh).to.eql('jrHigh1');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (schoolList.primary)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.schoolList[1].primary).to.eql('primarySchool2');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (schoolList.jrHigh)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.schoolList[1].jrHigh).to.eql('jrHigh2');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Value check for (roomList.type)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[0].type).to.eql('MAIN_FLOOR_BEDROOM');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.indicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[0].indicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.dimensions)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[0].dimensions).to.eql('dimensions1');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.length)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[0].length).to.eql(3.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.lengthUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[0].lengthUnit).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.width)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[0].width).to.eql(3.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.widthUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[0].widthUnit).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.area)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[0].area).to.eql(9.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.areaUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[0].areaUnit).to.eql('SQ_METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.areaType)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[0].areaType).to.eql('INTEGER');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.bathSize)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[0].bathSize).to.eql(null);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Value check for (roomList.type)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[1].type).to.eql('MAIN_FLOOR_BEDROOM');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.indicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[1].indicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.dimensions)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[1].dimensions).to.eql('dimensions2');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.length)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[1].length).to.eql(2.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.lengthUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[1].lengthUnit).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.width)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[1].width).to.eql(3.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.widthUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[1].widthUnit).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.area)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[1].area).to.eql(6.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.areaUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[1].areaUnit).to.eql('SQ_METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.areaType)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[1].areaType).to.eql('INTEGER');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.bathSize)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[1].bathSize).to.eql(null);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Value check for (roomList.type)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[2].type).to.eql('MASTER_BEDROOM');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.indicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[2].indicator).to.eql('NO');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.dimensions)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[2].dimensions).to.eql('dimensions3');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.length)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[2].length).to.eql(0.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.lengthUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[2].lengthUnit).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.width)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[2].width).to.eql(0.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.widthUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[2].widthUnit).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.area)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[2].area).to.eql(0.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.areaUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[2].areaUnit).to.eql('SQ_METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.areaType)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[2].areaType).to.eql('INTEGER');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.bathSize)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[2].bathSize).to.eql(null);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Value check for (roomList.type)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[3].type).to.eql('LIVING_ROOM');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.indicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[3].indicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.dimensions)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[3].dimensions).to.eql('dimensions4');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.length)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[3].length).to.eql(5.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.lengthUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[3].lengthUnit).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.width)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[3].width).to.eql(5.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.widthUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[3].widthUnit).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.area)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[3].area).to.eql(25.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.areaUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[3].areaUnit).to.eql('SQ_METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.areaUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[3].areaUnit).to.eql('SQ_METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.areaType)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[3].areaType).to.eql('INTEGER');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.bathSize)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[3].bathSize).to.eql(null);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Value check for (roomList.type)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[4].type).to.eql('KITCHEN');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.indicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[4].indicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.dimensions)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[4].dimensions).to.eql('dimensions5');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.length)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[4].length).to.eql(4.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.lengthUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[4].lengthUnit).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.width)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[4].width).to.eql(4.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.widthUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[4].widthUnit).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.area)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[4].area).to.eql(16.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.areaUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[4].areaUnit).to.eql('SQ_METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.areaType)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[4].areaType).to.eql('INTEGER');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.bathSize)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[4].bathSize).to.eql(null);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Value check for (roomList.type)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[5].type).to.eql('MAIN_FLOOR_BATHROOM');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.indicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[5].indicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.dimensions)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[5].dimensions).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.length)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[5].length).to.eql(0.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.lengthUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[5].lengthUnit).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.width)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[5].width).to.eql(0.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.widthUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[5].widthUnit).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.area)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[5].area).to.eql(0.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.areaUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[5].areaUnit).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.areaType)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[5].areaType).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.bathSize)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[5].bathSize).to.eql('FULL');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Value check for (roomList.type)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[6].type).to.eql('MAIN_FLOOR_BATHROOM');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.indicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[6].indicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.dimensions)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[6].dimensions).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.length)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[6].length).to.eql(0.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.lengthUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[6].lengthUnit).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.width)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[6].width).to.eql(0.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.widthUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[6].widthUnit).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.area)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[6].area).to.eql(0.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.areaUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[6].areaUnit).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.areaType)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[6].areaType).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.bathSize)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[6].bathSize).to.eql('HALF');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Value check for (roomList.type)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[7].type).to.eql('MAIN_FLOOR_BATHROOM');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.indicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[7].indicator).to.eql('NO');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.dimensions)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[7].dimensions).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.length)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[7].length).to.eql(0.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.lengthUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[7].lengthUnit).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.width)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[7].width).to.eql(0.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.widthUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[7].widthUnit).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.area)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[7].area).to.eql(0.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.areaUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[7].areaUnit).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.areaType)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[7].areaType).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.bathSize)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[7].bathSize).to.eql('THREE_QUARTER');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Value check for (roomList.type)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[8].type).to.eql('DEN');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.indicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[8].indicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.dimensions)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[8].dimensions).to.eql('dimensions6');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.length)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[8].length).to.eql(1.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.lengthUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[8].lengthUnit).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.width)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[8].width).to.eql(2.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.widthUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[8].widthUnit).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.area)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[8].area).to.eql(2.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.areaUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[8].areaUnit).to.eql('SQ_METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.areaType)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[8].areaType).to.eql('INTEGER');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.bathSize)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[8].bathSize).to.eql(null);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Value check for (roomList.type)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[9].type).to.eql('OFFICE');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.indicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[9].indicator).to.eql('NO');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.dimensions)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[9].dimensions).to.eql('dimensions7');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.length)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[9].length).to.eql(0.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.lengthUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[9].lengthUnit).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.width)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[9].width).to.eql(0.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.widthUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[9].widthUnit).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.area)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[9].area).to.eql(0.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.areaUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[9].areaUnit).to.eql('SQ_METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.areaType)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[9].areaType).to.eql('INTEGER');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.bathSize)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[9].bathSize).to.eql(null);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Value check for (roomList.type)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[10].type).to.eql('GAME');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.indicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[10].indicator).to.eql('NO');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.dimensions)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[10].dimensions).to.eql('dimensions8');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.length)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[10].length).to.eql(0.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.lengthUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[10].lengthUnit).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.width)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[10].width).to.eql(0.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.widthUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[10].widthUnit).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.area)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[10].area).to.eql(0.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.areaUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[10].areaUnit).to.eql('SQ_METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.areaType)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[10].areaType).to.eql('INTEGER');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.bathSize)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[10].bathSize).to.eql(null);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Value check for (roomList.type)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[11].type).to.eql('LAUNDRY');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.indicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[11].indicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.dimensions)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[11].dimensions).to.eql('dimensions9');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.length)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[11].length).to.eql(2.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.lengthUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[11].lengthUnit).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.width)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[11].width).to.eql(2.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.widthUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[11].widthUnit).to.eql('METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.area)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[11].area).to.eql(4.0);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.areaUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[11].areaUnit).to.eql('SQ_METERS');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.areaType)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[11].areaType).to.eql('INTEGER');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (roomList.bathSize)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.roomList[11].bathSize).to.eql(null);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Value check for (viewData.cityLight)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.viewData.cityLight).to.eql('cityLight');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (viewData.cityLightIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.viewData.cityLightIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (viewData.mountain)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.viewData.mountain).to.eql('mountain');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (viewData.mountainIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.viewData.mountainIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (viewData.river)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.viewData.river).to.eql('river');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (viewData.riverIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.viewData.riverIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (viewData.lake)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.viewData.lake).to.eql('lake');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (viewData.lakeIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.viewData.lakeIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (viewData.golfCourse)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.viewData.golfCourse).to.eql('golfCourse');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (viewData.golfCourseIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.viewData.golfCourseIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (viewData.water)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.viewData.water).to.eql('water');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (viewData.waterIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.viewData.waterIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Value check for (animalPolicy.animalsPermitted)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.animalPolicy.animalsPermitted).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (animalPolicy.permittedTypes)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.animalPolicy.permittedTypes).to.eql('permittedTypes');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (animalPolicy.weightLimit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.animalPolicy.weightLimit).to.eql(10);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (animalPolicy.weightUnit)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.animalPolicy.weightUnit).to.eql('KILO');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Value check for (community.clubHouse)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.community.clubHouse).to.eql('clubHouse');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (community.clubHouseIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.community.clubHouseIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (community.exerciseArea)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.community.exerciseArea).to.eql('exerciseArea');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (community.exerciseAreaIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.community.exerciseAreaIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (community.golf)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.community.golf).to.eql('golf');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (community.golfIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.community.golfIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (community.tennis)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.community.tennis).to.eql('tennis');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (community.tennisIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.community.tennisIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (community.recreationalFacilities)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.community.recreationalFacilities).to.eql('recreationalFacilities');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (community.recreationalFacilitiesIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.community.recreationalFacilitiesIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (community.securityFeatures)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.community.securityFeatures).to.eql('securityFeatures');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (community.securityFeaturesIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.community.securityFeaturesIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (community.seniorCommunity)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.community.seniorCommunity).to.eql('seniorCommunity');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (community.seniorCommunityIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.community.seniorCommunityIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (community.hotTub)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.community.hotTub).to.eql('hotTub');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (community.hotTubIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.community.hotTubIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (community.pool)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.community.pool).to.eql('pool');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (community.poolIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.community.poolIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (community.boatFacilities)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.community.boatFacilities).to.eql('boatFacilities');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (community.boatFacilitiesIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.community.boatFacilitiesIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (community.horseFacilities)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.community.horseFacilities).to.eql('horseFacilities');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (community.horseFacilitiesIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.community.horseFacilitiesIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (community.communityPark)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.community.communityPark).to.eql('communityPark');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (community.communityParkIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.community.communityParkIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Value check for (lotData.cornerLot)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.lotData.cornerLot).to.eql('cornerLot');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (lotData.cornerLotIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.lotData.cornerLotIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (lotData.culdeSac)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.lotData.culdeSac).to.eql('culdeSac');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (lotData.culdeSacIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.lotData.culdeSacIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (lotData.golfCourseLot)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.lotData.golfCourseLot).to.eql('golfCourseLot');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (lotData.golfCourseLotIndicator)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.lotData.golfCourseLotIndicator).to.eql('YES');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Value check for (contactInformation.agentPhone.primaryPhone)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.contactInformation.agentPhone.primaryPhone).to.eql('1111111');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (contactInformation.agentPhone.alternatePhone)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.contactInformation.agentPhone.alternatePhone).to.eql('222222222');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (contactInformation.listAgentPhone.primaryPhone)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.contactInformation.listAgentPhone.primaryPhone).to.eql('333333333');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (contactInformation.listAgentPhone.alternatePhone)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.contactInformation.listAgentPhone.alternatePhone).to.eql('444444444');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (contactInformation.salesAgentPhone.primaryPhone)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.contactInformation.salesAgentPhone.primaryPhone).to.eql('555555555');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (contactInformation.salesAgentPhone.alternatePhone)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.contactInformation.salesAgentPhone.alternatePhone).to.eql('6666666666');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (contactInformation.officePhone.primaryPhone)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.contactInformation.officePhone.primaryPhone).to.eql('777777777');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (contactInformation.officePhone.alternatePhone)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.contactInformation.officePhone.alternatePhone).to.eql('8888888888');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (contactInformation.listOfficePhone.primaryPhone)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.contactInformation.listOfficePhone.primaryPhone).to.eql('99999999');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (contactInformation.listOfficePhone.alternatePhone)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.contactInformation.listOfficePhone.alternatePhone).to.eql('00000000');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (contactInformation.salesOfficePhone.primaryPhone)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.contactInformation.salesOfficePhone.primaryPhone).to.eql('101010101010');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (contactInformation.salesOfficePhone.alternatePhone)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.contactInformation.salesOfficePhone.alternatePhone).to.eql('202020202020202');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (listingPrice.lowAmount)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.listingPrice.lowAmount).to.eql(650000);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (listingPrice.highAmount)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.listingPrice.highAmount).to.eql(800000);\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (listingPrice.lowAmountType)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.listingPrice.lowAmountType).to.eql('FLOAT');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (listingPrice.highAmountType)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.listingPrice.highAmountType).to.eql('FLOAT');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (listingPrice.lowAmountCurrencyCode)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.listingPrice.lowAmountCurrencyCode).to.eql('USD');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (listingPrice.highAmountCurrencyCode)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.listingPrice.highAmountCurrencyCode).to.eql('CAD');\r",
									"});\r",
									"\r",
									"pm.test(\"Value check for (listingPrice.units)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.listingPrice.units).to.eql('SQ_FEET');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/properties/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"properties",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Property with all Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"age\": 8,\r\n    \"horseFacilities\": \"horseFacilities\",\r\n    \"horseFacilitiesIndicator\": \"YES\",\r\n    \"hotTub\": \"hotTub\",\r\n    \"hotTubIndicator\": \"YES\",\r\n    \"tennisCourt\": \"tennisCourt\",\r\n    \"tennisCourtIndicator\": \"YES\",\r\n    \"inclusions\": \"inclusions\",\r\n    \"energyInformation\": \"energyInformation\",\r\n    \"constructionMaterial\": \"constructionMaterial\",\r\n    \"disabilityFeatures\": \"disabilityFeatures\",\r\n    \"disabilityFeaturesIndicator\": \"YES\",\r\n    \"securityFeatures\": \"securityFeatures\",\r\n    \"securityFeaturesIndicator\": \"YES\",\r\n    \"propertyTypeRental\": true,\r\n    \"propertyTypeFarm\": false,\r\n    \"propertyTypeCondo\": false,\r\n    \"propertyTypeTownHouse\": true,\r\n    \"firePlaceFuelType\": \"fire\",\r\n    \"firePlaceDetails\": \"details\",\r\n    \"floorsHardwood\": \"wood\",\r\n    \"floorsHardwoodIndicator\": \"NO\",\r\n    \"displayFlagListing\": true,\r\n    \"displayFlagAddress\": true,\r\n    \"lotSizeRange\": \"size\",\r\n    \"lotSizeRangeUnits\": \"SQ_METERS\",\r\n    \"lotSizeWidthUnits\": \"METERS\",\r\n    \"diningRoomWidthUnits\": \"METERS\",\r\n    \"familyRoomWidthUnits\": \"METERS\",\r\n    \"livingRoomWidthUnits\": \"METERS\",\r\n    \"basementWidthUnits\": \"METERS\",\r\n    \"lotSizeLengthUnits\": \"METERS\",\r\n    \"diningRoomLengthUnits\": \"METERS\",\r\n    \"livingRoomLengthUnits\": \"METERS\",\r\n    \"familyRoomLengthUnits\": \"METERS\",\r\n    \"basementLengthUnits\": \"METERS\",\r\n    \"parkingTotal\": 0,\r\n    \"parkingTotalOperator\": \"DEFAULT_ENUM_VALUE\",\r\n    \"financialData\": {\r\n        \"leaseOption\": \"leaseOption\",\r\n        \"leaseIndicator\": \"YES\",\r\n        \"tradeOption\": \"tradeOption\",\r\n        \"tradeIndicator\": \"YES\",\r\n        \"rentalAmount\": 5000,\r\n        \"rentalAmountType\": \"INTEGER\",\r\n        \"rentalAmountCurrencyCode\": \"rentalAmountCurrencyCode\",\r\n        \"rentalAmountPeriod\": \"MONTH\",\r\n        \"rentalAmountUnit\": \"SQ_METERS\"\r\n    },\r\n    \"schoolList\": [\r\n        {\r\n            \"primary\": \"primarySchool1\",\r\n            \"jrHigh\": \"jrHigh1\"\r\n        },\r\n        {\r\n            \"primary\": \"primarySchool2\",\r\n            \"jrHigh\": \"jrHigh2\"\r\n        }\r\n    ],\r\n    \"roomList\": [\r\n        {\r\n            \"type\": \"MAIN_FLOOR_BEDROOM\",\r\n            \"indicator\": \"YES\",\r\n            \"dimensions\": \"dimensions1\",\r\n            \"length\": 3,\r\n            \"lengthUnit\": \"METERS\",\r\n            \"width\": 3,\r\n            \"widthUnit\": \"METERS\",\r\n            \"area\": 9,\r\n            \"areaUnit\": \"SQ_METERS\",\r\n            \"areaType\": \"INTEGER\"\r\n        },\r\n        {\r\n            \"type\": \"MAIN_FLOOR_BEDROOM\",\r\n            \"indicator\": \"YES\",\r\n            \"dimensions\": \"dimensions2\",\r\n            \"length\": 2,\r\n            \"lengthUnit\": \"METERS\",\r\n            \"width\": 3,\r\n            \"widthUnit\": \"METERS\",\r\n            \"area\": 6,\r\n            \"areaUnit\": \"SQ_METERS\",\r\n            \"areaType\": \"INTEGER\"\r\n        },\r\n        {\r\n            \"type\": \"MASTER_BEDROOM\",\r\n            \"indicator\": \"NO\",\r\n            \"dimensions\": \"dimensions3\",\r\n            \"length\": 0,\r\n            \"lengthUnit\": \"METERS\",\r\n            \"width\": 0,\r\n            \"widthUnit\": \"METERS\",\r\n            \"area\": 0,\r\n            \"areaUnit\": \"SQ_METERS\",\r\n            \"areaType\": \"INTEGER\"\r\n        },\r\n        {\r\n            \"type\": \"LIVING_ROOM\",\r\n            \"indicator\": \"YES\",\r\n            \"dimensions\": \"dimensions4\",\r\n            \"length\": 5,\r\n            \"lengthUnit\": \"METERS\",\r\n            \"width\": 5,\r\n            \"widthUnit\": \"METERS\",\r\n            \"area\": 25,\r\n            \"areaUnit\": \"SQ_METERS\",\r\n            \"areaType\": \"INTEGER\"\r\n        },\r\n        {\r\n            \"type\": \"KITCHEN\",\r\n            \"indicator\": \"YES\",\r\n            \"dimensions\": \"dimensions5\",\r\n            \"length\": 4,\r\n            \"lengthUnit\": \"METERS\",\r\n            \"width\": 4,\r\n            \"widthUnit\": \"METERS\",\r\n            \"area\": 16,\r\n            \"areaUnit\": \"SQ_METERS\",\r\n            \"areaType\": \"INTEGER\"\r\n        },\r\n        {\r\n            \"type\": \"MAIN_FLOOR_BATHROOM\",\r\n            \"indicator\": \"YES\",\r\n            \"bathSize\": \"FULL\"\r\n        },\r\n        {\r\n            \"type\": \"MAIN_FLOOR_BATHROOM\",\r\n            \"indicator\": \"YES\",\r\n            \"bathSize\": \"HALF\"\r\n        },\r\n        {\r\n            \"type\": \"MAIN_FLOOR_BATHROOM\",\r\n            \"indicator\": \"NO\",\r\n            \"bathSize\": \"THREE_QUARTER\"\r\n        },\r\n        {\r\n            \"type\": \"DEN\",\r\n            \"indicator\": \"YES\",\r\n            \"dimensions\": \"dimensions6\",\r\n            \"length\": 1,\r\n            \"lengthUnit\": \"METERS\",\r\n            \"width\": 2,\r\n            \"widthUnit\": \"METERS\",\r\n            \"area\": 2,\r\n            \"areaUnit\": \"SQ_METERS\",\r\n            \"areaType\": \"INTEGER\"\r\n        },\r\n        {\r\n            \"type\": \"OFFICE\",\r\n            \"indicator\": \"NO\",\r\n            \"dimensions\": \"dimensions7\",\r\n            \"length\": 0,\r\n            \"lengthUnit\": \"METERS\",\r\n            \"width\": 0,\r\n            \"widthUnit\": \"METERS\",\r\n            \"area\": 0,\r\n            \"areaUnit\": \"SQ_METERS\",\r\n            \"areaType\": \"INTEGER\"\r\n        },\r\n        {\r\n            \"type\": \"GAME\",\r\n            \"indicator\": \"NO\",\r\n            \"dimensions\": \"dimensions8\",\r\n            \"length\": 0,\r\n            \"lengthUnit\": \"METERS\",\r\n            \"width\": 0,\r\n            \"widthUnit\": \"METERS\",\r\n            \"area\": 0,\r\n            \"areaUnit\": \"SQ_METERS\",\r\n            \"areaType\": \"INTEGER\"\r\n        },\r\n        {\r\n            \"type\": \"LAUNDRY\",\r\n            \"indicator\": \"YES\",\r\n            \"dimensions\": \"dimensions9\",\r\n            \"length\": 2,\r\n            \"lengthUnit\": \"METERS\",\r\n            \"width\": 2,\r\n            \"widthUnit\": \"METERS\",\r\n            \"area\": 4,\r\n            \"areaUnit\": \"SQ_METERS\",\r\n            \"areaType\": \"INTEGER\"\r\n        }\r\n    ],\r\n    \"lotData\": {\r\n        \"cornerLot\": \"cornerLot\",\r\n        \"cornerLotIndicator\": \"YES\",\r\n        \"culdeSac\": \"culdeSac\",\r\n        \"culdeSacIndicator\": \"YES\",\r\n        \"golfCourseLot\": \"golfCourseLot\",\r\n        \"golfCourseLotIndicator\": \"YES\"\r\n    },\r\n    \"animalPolicy\": {\r\n        \"animalsPermitted\": \"YES\",\r\n        \"permittedTypes\": \"permittedTypes\",\r\n        \"weightLimit\": 10,\r\n        \"weightUnit\": \"KILO\"\r\n    },\r\n    \"community\": {\r\n        \"clubHouse\": \"clubHouse\",\r\n        \"clubHouseIndicator\": \"YES\",\r\n        \"exerciseArea\": \"exerciseArea\",\r\n        \"exerciseAreaIndicator\": \"YES\",\r\n        \"golf\": \"golf\",\r\n        \"golfIndicator\": \"YES\",\r\n        \"tennis\": \"tennis\",\r\n        \"tennisIndicator\": \"YES\",\r\n        \"recreationalFacilities\": \"recreationalFacilities\",\r\n        \"recreationalFacilitiesIndicator\": \"YES\",\r\n        \"securityFeatures\": \"securityFeatures\",\r\n        \"securityFeaturesIndicator\": \"YES\",\r\n        \"seniorCommunity\": \"seniorCommunity\",\r\n        \"seniorCommunityIndicator\": \"YES\",\r\n        \"hotTub\": \"hotTub\",\r\n        \"hotTubIndicator\": \"YES\",\r\n        \"pool\": \"pool\",\r\n        \"poolIndicator\": \"YES\",\r\n        \"boatFacilities\": \"boatFacilities\",\r\n        \"boatFacilitiesIndicator\": \"YES\",\r\n        \"horseFacilities\": \"horseFacilities\",\r\n        \"horseFacilitiesIndicator\": \"YES\",\r\n        \"communityPark\": \"communityPark\",\r\n        \"communityParkIndicator\": \"YES\"\r\n    },\r\n    \"viewData\": {\r\n        \"cityLight\": \"cityLight\",\r\n        \"cityLightIndicator\": \"YES\",\r\n        \"mountain\": \"mountain\",\r\n        \"mountainIndicator\": \"YES\",\r\n        \"river\": \"river\",\r\n        \"riverIndicator\": \"YES\",\r\n        \"lake\": \"lake\",\r\n        \"lakeIndicator\": \"YES\",\r\n        \"golfCourse\": \"golfCourse\",\r\n        \"golfCourseIndicator\": \"YES\",\r\n        \"water\": \"water\",\r\n        \"waterIndicator\": \"YES\"\r\n    },\r\n    \"listingPrice\": {\r\n        \"lowAmount\": 650000,\r\n        \"highAmount\": 800000,\r\n        \"lowAmountType\": \"FLOAT\",\r\n        \"highAmountType\": \"FLOAT\",\r\n        \"lowAmountCurrencyCode\": \"USD\",\r\n        \"highAmountCurrencyCode\": \"CAD\",\r\n        \"units\": \"SQ_FEET\"\r\n    }\r\n    ,\r\n    \"contactInformation\": {\r\n        \"agentPhone\": {\r\n            \"primaryPhone\": \"1111111\",\r\n            \"alternatePhone\": \"222222222\"\r\n        },\r\n        \"listAgentPhone\": {\r\n            \"primaryPhone\": \"333333333\",\r\n            \"alternatePhone\": \"444444444\"\r\n        },\r\n        \"salesAgentPhone\": {\r\n            \"primaryPhone\": \"555555555\",\r\n            \"alternatePhone\": \"6666666666\"\r\n        },\r\n        \"officePhone\": {\r\n            \"primaryPhone\": \"777777777\",\r\n            \"alternatePhone\": \"8888888888\"\r\n        },\r\n        \"listOfficePhone\": {\r\n            \"primaryPhone\": \"99999999\",\r\n            \"alternatePhone\": \"00000000\"\r\n        },\r\n        \"salesOfficePhone\": {\r\n            \"primaryPhone\": \"101010101010\",\r\n            \"alternatePhone\": \"202020202020202\"\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/properties/",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"properties",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get all properties",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/properties",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"properties"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age).to.eql(8);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/properties/30",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"properties",
						"30"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get by Filter",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/properties?propertyAgeStart=7&propertyAgeStartOperator=GREATER_THEN&propertyAgeEnd=10&propertyAgeEndOperator=LESS_THEN&propertyBedroomsQtyStart=1&propertyBedroomsQtyStartOperator=GREATER_THEN&propertyBedroomsQtyEnd=3&propertyBedroomsQtyEndOperator=LESS_THEN&propertyBathroomsQtyStart=1&propertyBathroomsQtyStartOperator=GREATER_THEN&propertyBathroomsQtyEnd=3&propertyBathroomsQtyEndOperator=LESS_THEN&propertyHorseFacilitiesDescription=horseFacilities&propertyHorseFacilitiesIndicator=YES&propertyHotTubDescription=hotTub&propertyHotTubIndicator=YES&propertyTennisCourtDescription=tennisCourt&propertyTennisCourtIndicator=YES&propertyDisabilityFeaturesDescription=disabilityFeatures&propertyDisabilityFeaturesIndicator=YES&propertySecurityFeaturesDescription=securityFeatures&propertySecurityFeaturesIndicator=YES&propertyInclusionsDescription=inclusions&propertyEnergyInformationDescription=energyInformation&propertyConstructionMaterialDescription=constructionMaterial&propertyTypeRental=true&propertyTypeCondo=false&propertyTypeTownHouse=true&propertyTypeFarm=false&schoolList=primarySchool1; jrHigh1&schoolList=primarySchool2; jrHigh2&propertyBathSizes=FULL&propertyBathSizes=HALF&propertyBathSizes=THREE_QUARTER&lotDataCornerLotIndicator=YES&lotDataCuldeSacIndicator=YES&lotDataGolfCourseLotIndicator=YES&viewDataCityLightIndicator=YES&viewDataMountainIndicator=YES&viewDataRiverIndicator=YES&viewDataLakeIndicator=YES&viewDataGolfCourseIndicator=YES&viewDataWaterIndicator=YES&financialDataTradeIndicator=YES&financialDataLeaseIndicator=YES&financialDataRentalAmountStart=5000&financialDataRentalAmountStartOperator=GREATER_THEN&financialDataRentalAmountEnd=10000&financialDataRentalAmountEndOperator=LESS_THEN&animalPolicyAnimalPermitted=YES&communityClubHouseIndicator=YES&communityExerciseAreaIndicator=YES&communityGolfIndicator=YES&communityTennisIndicator=YES&communityRecreationalFacilitiesIndicator=YES&communitySecurityFeaturesIndicator=YES&communitySeniorCommunityIndicator=YES&communityHotTubIndicator=YES&communityPoolIndicator=YES&communityBoatFacilitiesIndicator=YES&communityHorseFacilitiesIndicator=YES&communityParkIndicator=YES&propertyFirePlaceFuelType=fire&propertyFirePlaceDetails=details&propertyFloorsHardwood=wood&propertyFloorsHardwoodIndicator=NO&propertyDisplayFlagListing=true&propertyDisplayFlagAddress=true&propertyLotSizeRange=size&propertyLotSizeRangeUnits=SQ_METERS&propertyLotSizeWidthUnits=METERS&propertyDiningRoomWidthUnits=METERS&propertyFamilyRoomWidthUnits=METERS&propertyLivingRoomWidthUnits=METERS&propertyBasementWidthUnits=METERS&propertyLotSizeLengthUnits=METERS&propertyDiningRoomLengthUnits=METERS&propertyLivingRoomLengthUnits=METERS&propertyFamilyRoomLengthUnits=METERS&propertyBasementLengthUnits=METERS&propertyParkingTotalStart=0&propertyParkingTotalStartOperator=GREATER_THEN&propertyParkingTotalEnd=2&propertyParkingTotalEndOperator=LESS_THEN&contactInformationPhoneNumbers=5145555577&contactInformationPhoneNumbers =5140002221&listingPriceLowAmount=450000",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"properties"
					],
					"query": [
						{
							"key": "propertyAgeStart",
							"value": "7"
						},
						{
							"key": "propertyAgeStartOperator",
							"value": "GREATER_THEN"
						},
						{
							"key": "propertyAgeEnd",
							"value": "10"
						},
						{
							"key": "propertyAgeEndOperator",
							"value": "LESS_THEN"
						},
						{
							"key": "propertyBedroomsQtyStart",
							"value": "1"
						},
						{
							"key": "propertyBedroomsQtyStartOperator",
							"value": "GREATER_THEN"
						},
						{
							"key": "propertyBedroomsQtyEnd",
							"value": "3"
						},
						{
							"key": "propertyBedroomsQtyEndOperator",
							"value": "LESS_THEN"
						},
						{
							"key": "propertyBathroomsQtyStart",
							"value": "1"
						},
						{
							"key": "propertyBathroomsQtyStartOperator",
							"value": "GREATER_THEN"
						},
						{
							"key": "propertyBathroomsQtyEnd",
							"value": "3"
						},
						{
							"key": "propertyBathroomsQtyEndOperator",
							"value": "LESS_THEN"
						},
						{
							"key": "propertyHorseFacilitiesDescription",
							"value": "horseFacilities"
						},
						{
							"key": "propertyHorseFacilitiesIndicator",
							"value": "YES"
						},
						{
							"key": "propertyHotTubDescription",
							"value": "hotTub"
						},
						{
							"key": "propertyHotTubIndicator",
							"value": "YES"
						},
						{
							"key": "propertyTennisCourtDescription",
							"value": "tennisCourt"
						},
						{
							"key": "propertyTennisCourtIndicator",
							"value": "YES"
						},
						{
							"key": "propertyDisabilityFeaturesDescription",
							"value": "disabilityFeatures"
						},
						{
							"key": "propertyDisabilityFeaturesIndicator",
							"value": "YES"
						},
						{
							"key": "propertySecurityFeaturesDescription",
							"value": "securityFeatures"
						},
						{
							"key": "propertySecurityFeaturesIndicator",
							"value": "YES"
						},
						{
							"key": "propertyInclusionsDescription",
							"value": "inclusions"
						},
						{
							"key": "propertyEnergyInformationDescription",
							"value": "energyInformation"
						},
						{
							"key": "propertyConstructionMaterialDescription",
							"value": "constructionMaterial"
						},
						{
							"key": "propertyTypeRental",
							"value": "true"
						},
						{
							"key": "propertyTypeCondo",
							"value": "false"
						},
						{
							"key": "propertyTypeTownHouse",
							"value": "true"
						},
						{
							"key": "propertyTypeFarm",
							"value": "false"
						},
						{
							"key": "schoolList",
							"value": "primarySchool1; jrHigh1"
						},
						{
							"key": "schoolList",
							"value": "primarySchool2; jrHigh2"
						},
						{
							"key": "propertyBathSizes",
							"value": "FULL"
						},
						{
							"key": "propertyBathSizes",
							"value": "HALF"
						},
						{
							"key": "propertyBathSizes",
							"value": "THREE_QUARTER"
						},
						{
							"key": "lotDataCornerLotIndicator",
							"value": "YES"
						},
						{
							"key": "lotDataCuldeSacIndicator",
							"value": "YES"
						},
						{
							"key": "lotDataGolfCourseLotIndicator",
							"value": "YES"
						},
						{
							"key": "viewDataCityLightIndicator",
							"value": "YES"
						},
						{
							"key": "viewDataMountainIndicator",
							"value": "YES"
						},
						{
							"key": "viewDataRiverIndicator",
							"value": "YES"
						},
						{
							"key": "viewDataLakeIndicator",
							"value": "YES"
						},
						{
							"key": "viewDataGolfCourseIndicator",
							"value": "YES"
						},
						{
							"key": "viewDataWaterIndicator",
							"value": "YES"
						},
						{
							"key": "financialDataTradeIndicator",
							"value": "YES"
						},
						{
							"key": "financialDataLeaseIndicator",
							"value": "YES"
						},
						{
							"key": "financialDataRentalAmountStart",
							"value": "5000"
						},
						{
							"key": "financialDataRentalAmountStartOperator",
							"value": "GREATER_THEN"
						},
						{
							"key": "financialDataRentalAmountEnd",
							"value": "10000"
						},
						{
							"key": "financialDataRentalAmountEndOperator",
							"value": "LESS_THEN"
						},
						{
							"key": "animalPolicyAnimalPermitted",
							"value": "YES"
						},
						{
							"key": "communityClubHouseIndicator",
							"value": "YES"
						},
						{
							"key": "communityExerciseAreaIndicator",
							"value": "YES"
						},
						{
							"key": "communityGolfIndicator",
							"value": "YES"
						},
						{
							"key": "communityTennisIndicator",
							"value": "YES"
						},
						{
							"key": "communityRecreationalFacilitiesIndicator",
							"value": "YES"
						},
						{
							"key": "communitySecurityFeaturesIndicator",
							"value": "YES"
						},
						{
							"key": "communitySeniorCommunityIndicator",
							"value": "YES"
						},
						{
							"key": "communityHotTubIndicator",
							"value": "YES"
						},
						{
							"key": "communityPoolIndicator",
							"value": "YES"
						},
						{
							"key": "communityBoatFacilitiesIndicator",
							"value": "YES"
						},
						{
							"key": "communityHorseFacilitiesIndicator",
							"value": "YES"
						},
						{
							"key": "communityParkIndicator",
							"value": "YES"
						},
						{
							"key": "propertyFirePlaceFuelType",
							"value": "fire"
						},
						{
							"key": "propertyFirePlaceDetails",
							"value": "details"
						},
						{
							"key": "propertyFloorsHardwood",
							"value": "wood"
						},
						{
							"key": "propertyFloorsHardwoodIndicator",
							"value": "NO"
						},
						{
							"key": "propertyDisplayFlagListing",
							"value": "true"
						},
						{
							"key": "propertyDisplayFlagAddress",
							"value": "true"
						},
						{
							"key": "propertyLotSizeRange",
							"value": "size"
						},
						{
							"key": "propertyLotSizeRangeUnits",
							"value": "SQ_METERS"
						},
						{
							"key": "propertyLotSizeWidthUnits",
							"value": "METERS"
						},
						{
							"key": "propertyDiningRoomWidthUnits",
							"value": "METERS"
						},
						{
							"key": "propertyFamilyRoomWidthUnits",
							"value": "METERS"
						},
						{
							"key": "propertyLivingRoomWidthUnits",
							"value": "METERS"
						},
						{
							"key": "propertyBasementWidthUnits",
							"value": "METERS"
						},
						{
							"key": "propertyLotSizeLengthUnits",
							"value": "METERS"
						},
						{
							"key": "propertyDiningRoomLengthUnits",
							"value": "METERS"
						},
						{
							"key": "propertyLivingRoomLengthUnits",
							"value": "METERS"
						},
						{
							"key": "propertyFamilyRoomLengthUnits",
							"value": "METERS"
						},
						{
							"key": "propertyBasementLengthUnits",
							"value": "METERS"
						},
						{
							"key": "propertyParkingTotalStart",
							"value": "0"
						},
						{
							"key": "propertyParkingTotalStartOperator",
							"value": "GREATER_THEN"
						},
						{
							"key": "propertyParkingTotalEnd",
							"value": "2"
						},
						{
							"key": "propertyParkingTotalEndOperator",
							"value": "LESS_THEN"
						},
						{
							"key": "contactInformationPhoneNumbers",
							"value": "5145555577"
						},
						{
							"key": "contactInformationPhoneNumbers ",
							"value": "5140002221"
						},
						{
							"key": "listingPriceLowAmount",
							"value": "450000"
						},
						{
							"key": "listingPriceHighAmount",
							"value": "500000",
							"disabled": true
						},
						{
							"key": "listingPriceLowAmountCurrencyCode",
							"value": "USD",
							"disabled": true
						},
						{
							"key": "listingPriceHighAmountCurrencyCode",
							"value": "CAD",
							"disabled": true
						},
						{
							"key": "listingPriceUnits",
							"value": "SQ_FEET",
							"disabled": true
						},
						{
							"key": "contactInformationPhoneNumbers",
							"value": "5145555577",
							"disabled": true
						},
						{
							"key": "contactInformationPhoneNumbers",
							"value": "5140002225",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Property",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": 8,\r\n    \"horseFacilities\": \"horseFacilities\",\r\n    \"horseFacilitiesIndicator\": \"YES\",\r\n    \"hotTub\": \"hotTub\",\r\n    \"hotTubIndicator\": \"YES\",\r\n    \"tennisCourt\": \"tennisCourt\",\r\n    \"tennisCourtIndicator\": \"YES\",\r\n    \"inclusions\": \"inclusions\",\r\n    \"energyInformation\": \"energyInformation\",\r\n    \"constructionMaterial\": \"constructionMaterial\",\r\n    \"disabilityFeatures\": \"disabilityFeatures\",\r\n    \"disabilityFeaturesIndicator\": \"YES\",\r\n    \"securityFeatures\": \"securityFeatures\",\r\n    \"securityFeaturesIndicator\": \"YES\",\r\n    \"propertyTypeRental\": true,\r\n    \"propertyTypeFarm\": false,\r\n    \"propertyTypeCondo\": false,\r\n    \"propertyTypeTownHouse\": true,\r\n    \"firePlaceFuelType\": \"fire\",\r\n    \"firePlaceDetails\": \"details\",\r\n    \"floorsHardwood\": \"wood\",\r\n    \"floorsHardwoodIndicator\": \"NO\",\r\n    \"displayFlagListing\": true,\r\n    \"displayFlagAddress\": true,\r\n    \"lotSizeRange\": \"size\",\r\n    \"lotSizeRangeUnits\": \"SQ_METERS\",\r\n    \"lotSizeWidthUnits\": \"METERS\",\r\n    \"diningRoomWidthUnits\": \"METERS\",\r\n    \"familyRoomWidthUnits\": \"METERS\",\r\n    \"livingRoomWidthUnits\": \"METERS\",\r\n    \"basementWidthUnits\": \"METERS\",\r\n    \"lotSizeLengthUnits\": \"METERS\",\r\n    \"diningRoomLengthUnits\": \"METERS\",\r\n    \"livingRoomLengthUnits\": \"METERS\",\r\n    \"familyRoomLengthUnits\": \"METERS\",\r\n    \"basementLengthUnits\": \"METERS\",\r\n    \"parkingTotal\": 0,\r\n    \"parkingTotalOperator\": \"DEFAULT_ENUM_VALUE\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/properties/",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"properties",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Property with all Fields Copy",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": 8,\r\n    \"horseFacilities\": \"horseFacilities\",\r\n    \"horseFacilitiesIndicator\": \"YES\",\r\n    \"hotTub\": \"hotTub\",\r\n    \"hotTubIndicator\": \"YES\",\r\n    \"tennisCourt\": \"tennisCourt\",\r\n    \"tennisCourtIndicator\": \"YES\",\r\n    \"inclusions\": \"inclusions\",\r\n    \"energyInformation\": \"energyInformation\",\r\n    \"constructionMaterial\": \"constructionMaterial\",\r\n    \"disabilityFeatures\": \"disabilityFeatures\",\r\n    \"disabilityFeaturesIndicator\": \"YES\",\r\n    \"securityFeatures\": \"securityFeatures\",\r\n    \"securityFeaturesIndicator\": \"YES\",\r\n    \"propertyTypeRental\": true,\r\n    \"propertyTypeFarm\": false,\r\n    \"propertyTypeCondo\": false,\r\n    \"propertyTypeTownHouse\": true,\r\n    \"firePlaceFuelType\": \"fire\",\r\n    \"firePlaceDetails\": \"details\",\r\n    \"floorsHardwood\": \"wood\",\r\n    \"floorsHardwoodIndicator\": \"NO\",\r\n    \"displayFlagListing\": true,\r\n    \"displayFlagAddress\": true,\r\n    \"lotSizeRange\": \"size\",\r\n    \"lotSizeRangeUnits\": \"SQ_METERS\",\r\n    \"lotSizeWidthUnits\": \"METERS\",\r\n    \"diningRoomWidthUnits\": \"METERS\",\r\n    \"familyRoomWidthUnits\": \"METERS\",\r\n    \"livingRoomWidthUnits\": \"METERS\",\r\n    \"basementWidthUnits\": \"METERS\",\r\n    \"lotSizeLengthUnits\": \"METERS\",\r\n    \"diningRoomLengthUnits\": \"METERS\",\r\n    \"livingRoomLengthUnits\": \"METERS\",\r\n    \"familyRoomLengthUnits\": \"METERS\",\r\n    \"basementLengthUnits\": \"METERS\",\r\n    \"parkingTotal\": 0,\r\n    \"parkingTotalOperator\": \"DEFAULT_ENUM_VALUE\",\r\n    \"financialData\": {\r\n        \"leaseOption\": \"leaseOption\",\r\n        \"leaseIndicator\": \"YES\",\r\n        \"tradeOption\": \"tradeOption\",\r\n        \"tradeIndicator\": \"YES\",\r\n        \"rentalAmount\": 5000,\r\n        \"rentalAmountType\": \"INTEGER\",\r\n        \"rentalAmountCurrencyCode\": \"rentalAmountCurrencyCode\",\r\n        \"rentalAmountPeriod\": \"MONTH\",\r\n        \"rentalAmountUnit\": \"SQ_METERS\"\r\n    },\r\n    \"schoolList\": [\r\n        {\r\n            \"primary\": \"primarySchool1\",\r\n            \"jrHigh\": \"jrHigh1\"\r\n        },\r\n        {\r\n            \"primary\": \"primarySchool2\",\r\n            \"jrHigh\": \"jrHigh2\"\r\n        }\r\n    ],\r\n    \"roomList\": [\r\n        {\r\n            \"type\": \"MAIN_FLOOR_BEDROOM\",\r\n            \"indicator\": \"YES\",\r\n            \"dimensions\": \"dimensions1\",\r\n            \"length\": 3,\r\n            \"lengthUnit\": \"METERS\",\r\n            \"width\": 3,\r\n            \"widthUnit\": \"METERS\",\r\n            \"area\": 9,\r\n            \"areaUnit\": \"SQ_METERS\",\r\n            \"areaType\": \"INTEGER\"\r\n        },\r\n        {\r\n            \"type\": \"MAIN_FLOOR_BEDROOM\",\r\n            \"indicator\": \"YES\",\r\n            \"dimensions\": \"dimensions2\",\r\n            \"length\": 2,\r\n            \"lengthUnit\": \"METERS\",\r\n            \"width\": 3,\r\n            \"widthUnit\": \"METERS\",\r\n            \"area\": 6,\r\n            \"areaUnit\": \"SQ_METERS\",\r\n            \"areaType\": \"INTEGER\"\r\n        },\r\n        {\r\n            \"type\": \"MASTER_BEDROOM\",\r\n            \"indicator\": \"NO\",\r\n            \"dimensions\": \"dimensions3\",\r\n            \"length\": 0,\r\n            \"lengthUnit\": \"METERS\",\r\n            \"width\": 0,\r\n            \"widthUnit\": \"METERS\",\r\n            \"area\": 0,\r\n            \"areaUnit\": \"SQ_METERS\",\r\n            \"areaType\": \"INTEGER\"\r\n        },\r\n        {\r\n            \"type\": \"LIVING_ROOM\",\r\n            \"indicator\": \"YES\",\r\n            \"dimensions\": \"dimensions4\",\r\n            \"length\": 5,\r\n            \"lengthUnit\": \"METERS\",\r\n            \"width\": 5,\r\n            \"widthUnit\": \"METERS\",\r\n            \"area\": 25,\r\n            \"areaUnit\": \"SQ_METERS\",\r\n            \"areaType\": \"INTEGER\"\r\n        },\r\n        {\r\n            \"type\": \"KITCHEN\",\r\n            \"indicator\": \"YES\",\r\n            \"dimensions\": \"dimensions5\",\r\n            \"length\": 4,\r\n            \"lengthUnit\": \"METERS\",\r\n            \"width\": 4,\r\n            \"widthUnit\": \"METERS\",\r\n            \"area\": 16,\r\n            \"areaUnit\": \"SQ_METERS\",\r\n            \"areaType\": \"INTEGER\"\r\n        },\r\n        {\r\n            \"type\": \"MAIN_FLOOR_BATHROOM\",\r\n            \"indicator\": \"YES\",\r\n            \"bathSize\": \"FULL\"\r\n        },\r\n        {\r\n            \"type\": \"MAIN_FLOOR_BATHROOM\",\r\n            \"indicator\": \"YES\",\r\n            \"bathSize\": \"HALF\"\r\n        },\r\n        {\r\n            \"type\": \"MAIN_FLOOR_BATHROOM\",\r\n            \"indicator\": \"NO\",\r\n            \"bathSize\": \"THREE_QUARTER\"\r\n        },\r\n        {\r\n            \"type\": \"DEN\",\r\n            \"indicator\": \"YES\",\r\n            \"dimensions\": \"dimensions6\",\r\n            \"length\": 1,\r\n            \"lengthUnit\": \"METERS\",\r\n            \"width\": 2,\r\n            \"widthUnit\": \"METERS\",\r\n            \"area\": 2,\r\n            \"areaUnit\": \"SQ_METERS\",\r\n            \"areaType\": \"INTEGER\"\r\n        },\r\n        {\r\n            \"type\": \"OFFICE\",\r\n            \"indicator\": \"NO\",\r\n            \"dimensions\": \"dimensions7\",\r\n            \"length\": 0,\r\n            \"lengthUnit\": \"METERS\",\r\n            \"width\": 0,\r\n            \"widthUnit\": \"METERS\",\r\n            \"area\": 0,\r\n            \"areaUnit\": \"SQ_METERS\",\r\n            \"areaType\": \"INTEGER\"\r\n        },\r\n        {\r\n            \"type\": \"GAME\",\r\n            \"indicator\": \"NO\",\r\n            \"dimensions\": \"dimensions8\",\r\n            \"length\": 0,\r\n            \"lengthUnit\": \"METERS\",\r\n            \"width\": 0,\r\n            \"widthUnit\": \"METERS\",\r\n            \"area\": 0,\r\n            \"areaUnit\": \"SQ_METERS\",\r\n            \"areaType\": \"INTEGER\"\r\n        },\r\n        {\r\n            \"type\": \"LAUNDRY\",\r\n            \"indicator\": \"YES\",\r\n            \"dimensions\": \"dimensions9\",\r\n            \"length\": 2,\r\n            \"lengthUnit\": \"METERS\",\r\n            \"width\": 2,\r\n            \"widthUnit\": \"METERS\",\r\n            \"area\": 4,\r\n            \"areaUnit\": \"SQ_METERS\",\r\n            \"areaType\": \"INTEGER\"\r\n        }\r\n    ],\r\n    \"lotData\": {\r\n        \"cornerLot\": \"cornerLot\",\r\n        \"cornerLotIndicator\": \"YES\",\r\n        \"culdeSac\": \"culdeSac\",\r\n        \"culdeSacIndicator\": \"YES\",\r\n        \"golfCourseLot\": \"golfCourseLot\",\r\n        \"golfCourseLotIndicator\": \"YES\"\r\n    },\r\n    \"animalPolicy\": {\r\n        \"animalsPermitted\": \"YES\",\r\n        \"permittedTypes\": \"permittedTypes\",\r\n        \"weightLimit\": 10,\r\n        \"weightUnit\": \"KILO\"\r\n    },\r\n    \"community\": {\r\n        \"clubHouse\": \"clubHouse\",\r\n        \"clubHouseIndicator\": \"YES\",\r\n        \"exerciseArea\": \"exerciseArea\",\r\n        \"exerciseAreaIndicator\": \"YES\",\r\n        \"golf\": \"golf\",\r\n        \"golfIndicator\": \"YES\",\r\n        \"tennis\": \"tennis\",\r\n        \"tennisIndicator\": \"YES\",\r\n        \"recreationalFacilities\": \"recreationalFacilities\",\r\n        \"recreationalFacilitiesIndicator\": \"YES\",\r\n        \"securityFeatures\": \"securityFeatures\",\r\n        \"securityFeaturesIndicator\": \"YES\",\r\n        \"seniorCommunity\": \"seniorCommunity\",\r\n        \"seniorCommunityIndicator\": \"YES\",\r\n        \"hotTub\": \"hotTub\",\r\n        \"hotTubIndicator\": \"YES\",\r\n        \"pool\": \"pool\",\r\n        \"poolIndicator\": \"YES\",\r\n        \"boatFacilities\": \"boatFacilities\",\r\n        \"boatFacilitiesIndicator\": \"YES\",\r\n        \"horseFacilities\": \"horseFacilities\",\r\n        \"horseFacilitiesIndicator\": \"YES\",\r\n        \"communityPark\": \"communityPark\",\r\n        \"communityParkIndicator\": \"YES\"\r\n    },\r\n    \"viewData\": {\r\n        \"cityLight\": \"cityLight\",\r\n        \"cityLightIndicator\": \"YES\",\r\n        \"mountain\": \"mountain\",\r\n        \"mountainIndicator\": \"YES\",\r\n        \"river\": \"river\",\r\n        \"riverIndicator\": \"YES\",\r\n        \"lake\": \"lake\",\r\n        \"lakeIndicator\": \"YES\",\r\n        \"golfCourse\": \"golfCourse\",\r\n        \"golfCourseIndicator\": \"YES\",\r\n        \"water\": \"water\",\r\n        \"waterIndicator\": \"YES\"\r\n    },\r\n    \"listingPrice\": {\r\n        \"lowAmount\": 650000,\r\n        \"highAmount\": 800000,\r\n        \"lowAmountType\": \"FLOAT\",\r\n        \"highAmountType\": \"FLOAT\",\r\n        \"lowAmountCurrencyCode\": \"USD\",\r\n        \"highAmountCurrencyCode\": \"CAD\",\r\n        \"units\": \"SQ_FEET\"\r\n    }\r\n    ,\r\n    \"contactInformation\": {\r\n        \"agentPhone\": {\r\n            \"primaryPhone\": \"1111111\",\r\n            \"alternatePhone\": \"222222222\"\r\n        },\r\n        \"listAgentPhone\": {\r\n            \"primaryPhone\": \"333333333\",\r\n            \"alternatePhone\": \"444444444\"\r\n        },\r\n        \"salesAgentPhone\": {\r\n            \"primaryPhone\": \"555555555\",\r\n            \"alternatePhone\": \"6666666666\"\r\n        },\r\n        \"officePhone\": {\r\n            \"primaryPhone\": \"777777777\",\r\n            \"alternatePhone\": \"8888888888\"\r\n        },\r\n        \"listOfficePhone\": {\r\n            \"primaryPhone\": \"99999999\",\r\n            \"alternatePhone\": \"00000000\"\r\n        },\r\n        \"salesOfficePhone\": {\r\n            \"primaryPhone\": \"101010101010\",\r\n            \"alternatePhone\": \"202020202020202\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/properties/",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"properties",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "delete by id",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:8080/properties/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"properties",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch property basic fields by id",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": 5,\r\n    \"horseFacilities\": \"horseFacilities\",\r\n    \"horseFacilitiesIndicator\": \"YES\",\r\n    \"hotTub\": \"hotTub\",\r\n    \"hotTubIndicator\": \"YES\",\r\n    \"tennisCourt\": \"tennisCourt\",\r\n    \"tennisCourtIndicator\": \"YES\",\r\n    \"inclusions\": \"inclusions\",\r\n    \"energyInformation\": \"energyInformation\",\r\n    \"constructionMaterial\": \"constructionMaterial\",\r\n    \"disabilityFeatures\": \"disabilityFeatures\",\r\n    \"disabilityFeaturesIndicator\": \"YES\",\r\n    \"securityFeatures\": \"securityFeatures\",\r\n    \"securityFeaturesIndicator\": \"YES\",\r\n    \"propertyTypeRental\": true,\r\n    \"propertyTypeFarm\": false,\r\n    \"propertyTypeCondo\": false,\r\n    \"propertyTypeTownHouse\": true,\r\n    \"firePlaceFuelType\": \"fire\",\r\n    \"firePlaceDetails\": \"details\",\r\n    \"floorsHardwood\": \"wood\",\r\n    \"floorsHardwoodIndicator\": \"NO\",\r\n    \"displayFlagListing\": true,\r\n    \"displayFlagAddress\": true,\r\n    \"lotSizeRange\": \"size\",\r\n    \"lotSizeRangeUnits\": \"SQ_METERS\",\r\n    \"lotSizeWidthUnits\": \"METERS\",\r\n    \"diningRoomWidthUnits\": \"METERS\",\r\n    \"familyRoomWidthUnits\": \"METERS\",\r\n    \"livingRoomWidthUnits\": \"METERS\",\r\n    \"basementWidthUnits\": \"METERS\",\r\n    \"lotSizeLengthUnits\": \"METERS\",\r\n    \"diningRoomLengthUnits\": \"METERS\",\r\n    \"livingRoomLengthUnits\": \"METERS\",\r\n    \"familyRoomLengthUnits\": \"METERS\",\r\n    \"basementLengthUnits\": \"METERS\",\r\n    \"parkingTotal\": 0,\r\n    \"parkingTotalOperator\": \"DEFAULT_ENUM_VALUE\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/properties/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"properties",
						"1"
					]
				}
			},
			"response": []
		}
	]
}